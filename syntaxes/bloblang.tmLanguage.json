{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Bloblang",
  "scopeName": "source.bloblang",
  "patterns": [
    { "include": "#comments" },
    { "include": "#imports" },
    { "include": "#keywords" },
    { "include": "#assignments" },
    { "include": "#mapping" },
    { "include": "#expressions" }
  ],
  "repository": {
    "comments": {
      "name": "comment.line.number-sign.bloblang",
      "begin": "#",
      "end": "$\\n?",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.bloblang"
        }
      }
    },
    "mapping": {
      "name": "meta.mapping.bloblang",
      "begin": "(map)\\s+(\\w+)\\s+(\\{)",
      "end": "\\}",
      "beginCaptures": {
        "1": { "name": "entity.name.type.bloblang" },
        "2": { "name": "entity.name.tag.bloblang" },
        "3": { "name": "punctuation.section.begin.mapping.bloblang" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.section.end.mapping.bloblang" }
      },
      "patterns": [{ "include": "$self" }]
    },
    "references": {
      "patterns": [
        {
          "name": "variable.language.root.bloblang",
          "match": "\\b(root)\\b"
        },
        {
          "name": "variable.language.this.bloblang",
          "match": "\\b(this)\\b"
        },
        {
          "name": "variable.name.reference.bloblang",
          "match": "\\$\\w+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.bloblang",
          "match": "\\b(if|else)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.bloblang",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.comparison.bloblang",
          "match": "(!=?|>=?|<=?|==|\\|\\|?|&&)"
        },
        {
          "name": "keyword.operator.assign.bloblang",
          "match": "="
        }
      ]
    },
    "literals": {
      "patterns": [
        { "include": "#string_literals" },
        { "include": "#numeric_literals" },
        { "include": "#language_constants" }
      ]
    },
    "string_literals": {
      "patterns": [
        {
          "name": "string.quoted.single.bloblang",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.bloblang",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.bloblang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.bloblang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numeric_literals": {
      "patterns": [
        {
          "name": "constant.numeric.float.bloblang",
          "match": "\\b\\d+(\\.)\\d+\\b",
          "comment": "Fractions",
          "captures": {
            "1": {
              "name": "punctuation.separator.decimal.bloblang"
            }
          }
        },
        {
          "name": "constant.numeric.float.bloblang",
          "match": "\\b\\d+\\b",
          "comment": "Integers"
        }
      ]
    },
    "language_constants": {
      "patterns": [
        {
          "name": "constant.language.bloblang",
          "match": "\\b(true|false|null)\\b",
          "comment": "Language Constants"
        }
      ]
    },
    "string_accessor": {
      "begin": "\\.(\")",
      "end": "\"",
      "beginCaptures": {
        "1": { "name": "string.quoted.accessor.bloblang" }
      },
      "endCaptures": {
        "0": { "name": "string.quoted.accessor.bloblang" }
      },
      "contentName": "string.quoted.accessor.bloblang",
      "patterns": [
        {
          "name": "constant.character.escape.bloblang",
          "match": "\\\\."
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "comment": "Import",
          "match": "\\b(import)\\s+(\".*\")",
          "name": "meta.import.bloblang",
          "captures": {
            "1": { "name": "keyword.control.import.bloblang" },
            "2": { "name": "string.quoted.path.bloblang" }
          }
        }
      ]
    },
    "assignments": {
      "patterns": [
        {
          "comment": "Variable and meta declaration",
          "match": "\\b(let|meta)\\s+((?!null\\b|false\\b|true\\b)\\w+)\\s+",
          "name": "meta.declaration.bloblang",
          "captures": {
            "1": { "name": "keyword.declaration.bloblang" },
            "2": { "name": "variable.name.bloblang" }
          }
        }
      ]
    },
    "contexts": {
      "name": "meta.context.bloblang",
      "begin": "(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": { "name": "punctuation.section.begin.context.bloblang" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.section.end.context.bloblang" }
      },
      "patterns": [
        { "include": "#expressions" },
        { "include": "#keywords" },
        {
          "match": "(\\w+)\\s+(->)",
          "captures": {
            "1": { "name": "variable.parameter.bloblang" },
            "2": { "name": "storage.type.function.arrow.js" }
          }
        }
      ]
    },
    "calls": {
      "name": "meta.call.bloblang",
      "begin": "(\\w+)(\\()",
      "end": "\\)",
      "beginCaptures": {
        "1": { "name": "entity.name.call.bloblang" },
        "2": { "name": "punctuation.section.call.begin.bloblang" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.section.call.end.bloblang" }
      },
      "patterns": [
        { "include": "#expressions" },
        {
          "match": "\\b(\\w+):",
          "name": "variable.parameter.bloblang"
        },
        {
          "match": "(\\w+)\\s+(->)",
          "captures": {
            "1": { "name": "variable.parameter.bloblang" },
            "2": { "name": "storage.type.function.arrow.js" }
          }
        }
      ]
    },
    "match": {
      "name": "meta.match.bloblang",
      "begin": "\\b(match)\\s*(.*)\\s*(\\{)",
      "end": "\\}",
      "beginCaptures": {
        "1": { "name": "keyword.control.bloblang" },
        "2": { "patterns": [{ "include": "#expressions" }] },
        "3": { "name": "punctuation.section.begin.match.bloblang" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.section.end.match.bloblang" }
      },
      "patterns": [
        { "include": "#comments" },
        { "include": "#expressions" },
        {
          "match": "=>",
          "name": "keyword.operator.match.bloblang"
        },
        {
          "match": "\\b(_)\\s*(=>)",
          "captures": {
            "1": { "name": "variable.other.discard.bloblang" },
            "2": { "name": "keyword.operator.match.bloblang" }
          }
        }
      ]
    },
    "expressions": {
      "patterns": [
        { "include": "#references" },
        { "include": "#operators" },
        { "include": "#literals" },
        { "include": "#string_accessor" },
        { "include": "#contexts" },
        { "include": "#calls" },
        { "include": "#match" }
      ]
    }
  }
}
